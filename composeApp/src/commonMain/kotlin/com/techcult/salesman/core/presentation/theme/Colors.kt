package com.techcult.salesman.core.presentation.theme

import androidx.compose.foundation.isSystemInDarkTheme
import androidx.compose.material3.ColorScheme
import androidx.compose.runtime.Composable
import androidx.compose.ui.graphics.Color


val primaryLight = Color(0xFF000000)
val onPrimaryLight = Color(0xFFFFFFFF)
val primaryContainerLight = Color(0xFF1B192E)
val onPrimaryContainerLight = Color(0xFF84819A)
val secondaryLight = Color(0xFF5B5F62)
val onSecondaryLight = Color(0xFFFFFFFF)
val secondaryContainerLight = Color(0xFFECEEF2)
val onSecondaryContainerLight = Color(0xFF696C6F)
val tertiaryLight = Color(0xFF5B5F62)
val onTertiaryLight = Color(0xFFFFFFFF)
val tertiaryContainerLight = Color(0xFFE9EBEF)
val onTertiaryContainerLight = Color(0xFF676A6D)
val errorLight = Color(0xFFAB002C)
val onErrorLight = Color(0xFFFFFFFF)
val errorContainerLight = Color(0xFFD4183D)
val onErrorContainerLight = Color(0xFFFFEAE9)
val backgroundLight = Color(0xFFFCF8FA)
val onBackgroundLight = Color(0xFF1C1B1D)
val surfaceLight = Color(0xFFFCF8F8)
val onSurfaceLight = Color(0xFF1C1B1B)
val surfaceVariantLight = Color(0xFFE0E3E3)
val onSurfaceVariantLight = Color(0xFF444748)
val outlineLight = Color(0xFF747878)
val outlineVariantLight = Color(0xFFC4C7C8)
val scrimLight = Color(0xFF000000)
val inverseSurfaceLight = Color(0xFF313030)
val inverseOnSurfaceLight = Color(0xFFF4F0EF)
val inversePrimaryLight = Color(0xFFC8C3DF)
val surfaceDimLight = Color(0xFFDDD9D9)
val surfaceBrightLight = Color(0xFFFCF8F8)
val surfaceContainerLowestLight = Color(0xFFFFFFFF)
val surfaceContainerLowLight = Color(0xFFF6F3F2)
val surfaceContainerLight = Color(0xFFF1EDEC)
val surfaceContainerHighLight = Color(0xFFEBE7E7)
val surfaceContainerHighestLight = Color(0xFFE5E2E1)

val primaryLightMediumContrast = Color(0xFF000000)
val onPrimaryLightMediumContrast = Color(0xFFFFFFFF)
val primaryContainerLightMediumContrast = Color(0xFF1B192E)
val onPrimaryContainerLightMediumContrast = Color(0xFFA7A4BE)
val secondaryLightMediumContrast = Color(0xFF33373A)
val onSecondaryLightMediumContrast = Color(0xFFFFFFFF)
val secondaryContainerLightMediumContrast = Color(0xFF6A6D71)
val onSecondaryContainerLightMediumContrast = Color(0xFFFFFFFF)
val tertiaryLightMediumContrast = Color(0xFF33363A)
val onTertiaryLightMediumContrast = Color(0xFFFFFFFF)
val tertiaryContainerLightMediumContrast = Color(0xFF6A6D71)
val onTertiaryContainerLightMediumContrast = Color(0xFFFFFFFF)
val errorLightMediumContrast = Color(0xFF73001A)
val onErrorLightMediumContrast = Color(0xFFFFFFFF)
val errorContainerLightMediumContrast = Color(0xFFD4183D)
val onErrorContainerLightMediumContrast = Color(0xFFFFFFFF)
val backgroundLightMediumContrast = Color(0xFFFCF8FA)
val onBackgroundLightMediumContrast = Color(0xFF1C1B1D)
val surfaceLightMediumContrast = Color(0xFFFCF8F8)
val onSurfaceLightMediumContrast = Color(0xFF111111)
val surfaceVariantLightMediumContrast = Color(0xFFE0E3E3)
val onSurfaceVariantLightMediumContrast = Color(0xFF333738)
val outlineLightMediumContrast = Color(0xFF4F5354)
val outlineVariantLightMediumContrast = Color(0xFF6A6E6E)
val scrimLightMediumContrast = Color(0xFF000000)
val inverseSurfaceLightMediumContrast = Color(0xFF313030)
val inverseOnSurfaceLightMediumContrast = Color(0xFFF4F0EF)
val inversePrimaryLightMediumContrast = Color(0xFFC8C3DF)
val surfaceDimLightMediumContrast = Color(0xFFC9C6C5)
val surfaceBrightLightMediumContrast = Color(0xFFFCF8F8)
val surfaceContainerLowestLightMediumContrast = Color(0xFFFFFFFF)
val surfaceContainerLowLightMediumContrast = Color(0xFFF6F3F2)
val surfaceContainerLightMediumContrast = Color(0xFFEBE7E7)
val surfaceContainerHighLightMediumContrast = Color(0xFFDFDCDB)
val surfaceContainerHighestLightMediumContrast = Color(0xFFD4D1D0)

val primaryLightHighContrast = Color(0xFF000000)
val onPrimaryLightHighContrast = Color(0xFFFFFFFF)
val primaryContainerLightHighContrast = Color(0xFF1B192E)
val onPrimaryContainerLightHighContrast = Color(0xFFD1CDE9)
val secondaryLightHighContrast = Color(0xFF292C30)
val onSecondaryLightHighContrast = Color(0xFFFFFFFF)
val secondaryContainerLightHighContrast = Color(0xFF46494D)
val onSecondaryContainerLightHighContrast = Color(0xFFFFFFFF)
val tertiaryLightHighContrast = Color(0xFF292C30)
val onTertiaryLightHighContrast = Color(0xFFFFFFFF)
val tertiaryContainerLightHighContrast = Color(0xFF46494D)
val onTertiaryContainerLightHighContrast = Color(0xFFFFFFFF)
val errorLightHighContrast = Color(0xFF600014)
val onErrorLightHighContrast = Color(0xFFFFFFFF)
val errorContainerLightHighContrast = Color(0xFF970025)
val onErrorContainerLightHighContrast = Color(0xFFFFFFFF)
val backgroundLightHighContrast = Color(0xFFFCF8FA)
val onBackgroundLightHighContrast = Color(0xFF1C1B1D)
val surfaceLightHighContrast = Color(0xFFFCF8F8)
val onSurfaceLightHighContrast = Color(0xFF000000)
val surfaceVariantLightHighContrast = Color(0xFFE0E3E3)
val onSurfaceVariantLightHighContrast = Color(0xFF000000)
val outlineLightHighContrast = Color(0xFF292D2D)
val outlineVariantLightHighContrast = Color(0xFF464A4A)
val scrimLightHighContrast = Color(0xFF000000)
val inverseSurfaceLightHighContrast = Color(0xFF313030)
val inverseOnSurfaceLightHighContrast = Color(0xFFFFFFFF)
val inversePrimaryLightHighContrast = Color(0xFFC8C3DF)
val surfaceDimLightHighContrast = Color(0xFFBBB8B7)
val surfaceBrightLightHighContrast = Color(0xFFFCF8F8)
val surfaceContainerLowestLightHighContrast = Color(0xFFFFFFFF)
val surfaceContainerLowLightHighContrast = Color(0xFFF4F0EF)
val surfaceContainerLightHighContrast = Color(0xFFE5E2E1)
val surfaceContainerHighLightHighContrast = Color(0xFFD7D4D3)
val surfaceContainerHighestLightHighContrast = Color(0xFFC9C6C5)

val primaryDark = Color(0xFFC8C3DF)
val onPrimaryDark = Color(0xFF302E44)
val primaryContainerDark = Color(0xFF030213)
val onPrimaryContainerDark = Color(0xFF77748D)
val secondaryDark = Color(0xFFFFFFFF)
val onSecondaryDark = Color(0xFF2D3134)
val secondaryContainerDark = Color(0xFFE0E2E6)
val onSecondaryContainerDark = Color(0xFF616568)
val tertiaryDark = Color(0xFFFFFFFF)
val onTertiaryDark = Color(0xFF2D3134)
val tertiaryContainerDark = Color(0xFFE0E2E6)
val onTertiaryContainerDark = Color(0xFF626568)
val errorDark = Color(0xFFFFB3B4)
val onErrorDark = Color(0xFF680017)
val errorContainerDark = Color(0xFFD4183D)
val onErrorContainerDark = Color(0xFFFFEAE9)
val backgroundDark = Color(0xFF141315)
val onBackgroundDark = Color(0xFFE5E1E3)
val surfaceDark = Color(0xFF141313)
val onSurfaceDark = Color(0xFFE5E2E1)
val surfaceVariantDark = Color(0xFF444748)
val onSurfaceVariantDark = Color(0xFFC4C7C8)
val outlineDark = Color(0xFF8E9192)
val outlineVariantDark = Color(0xFF444748)
val scrimDark = Color(0xFF000000)
val inverseSurfaceDark = Color(0xFFE5E2E1)
val inverseOnSurfaceDark = Color(0xFF313030)
val inversePrimaryDark = Color(0xFF5E5C74)
val surfaceDimDark = Color(0xFF141313)
val surfaceBrightDark = Color(0xFF3A3939)
val surfaceContainerLowestDark = Color(0xFF0E0E0E)
val surfaceContainerLowDark = Color(0xFF1C1B1B)
val surfaceContainerDark = Color(0xFF201F1F)
val surfaceContainerHighDark = Color(0xFF2A2A2A)
val surfaceContainerHighestDark = Color(0xFF353434)

val primaryDarkMediumContrast = Color(0xFFDED9F5)
val onPrimaryDarkMediumContrast = Color(0xFF252338)
val primaryContainerDarkMediumContrast = Color(0xFF918EA8)
val onPrimaryContainerDarkMediumContrast = Color(0xFF000000)
val secondaryDarkMediumContrast = Color(0xFFFFFFFF)
val onSecondaryDarkMediumContrast = Color(0xFF2D3134)
val secondaryContainerDarkMediumContrast = Color(0xFFE0E2E6)
val onSecondaryContainerDarkMediumContrast = Color(0xFF45484C)
val tertiaryDarkMediumContrast = Color(0xFFFFFFFF)
val onTertiaryDarkMediumContrast = Color(0xFF2D3134)
val tertiaryContainerDarkMediumContrast = Color(0xFFE0E2E6)
val onTertiaryContainerDarkMediumContrast = Color(0xFF45484C)
val errorDarkMediumContrast = Color(0xFFFFD1D1)
val onErrorDarkMediumContrast = Color(0xFF530010)
val errorContainerDarkMediumContrast = Color(0xFFFF5263)
val onErrorContainerDarkMediumContrast = Color(0xFF000000)
val backgroundDarkMediumContrast = Color(0xFF141315)
val onBackgroundDarkMediumContrast = Color(0xFFE5E1E3)
val surfaceDarkMediumContrast = Color(0xFF141313)
val onSurfaceDarkMediumContrast = Color(0xFFFFFFFF)
val surfaceVariantDarkMediumContrast = Color(0xFF444748)
val onSurfaceVariantDarkMediumContrast = Color(0xFFDADDDD)
val outlineDarkMediumContrast = Color(0xFFAFB2B3)
val outlineVariantDarkMediumContrast = Color(0xFF8D9191)
val scrimDarkMediumContrast = Color(0xFF000000)
val inverseSurfaceDarkMediumContrast = Color(0xFFE5E2E1)
val inverseOnSurfaceDarkMediumContrast = Color(0xFF2A2A2A)
val inversePrimaryDarkMediumContrast = Color(0xFF48455C)
val surfaceDimDarkMediumContrast = Color(0xFF141313)
val surfaceBrightDarkMediumContrast = Color(0xFF454444)
val surfaceContainerLowestDarkMediumContrast = Color(0xFF070707)
val surfaceContainerLowDarkMediumContrast = Color(0xFF1E1D1D)
val surfaceContainerDarkMediumContrast = Color(0xFF282828)
val surfaceContainerHighDarkMediumContrast = Color(0xFF333232)
val surfaceContainerHighestDarkMediumContrast = Color(0xFF3E3D3D)

val primaryDarkHighContrast = Color(0xFFF2EEFF)
val onPrimaryDarkHighContrast = Color(0xFF000000)
val primaryContainerDarkHighContrast = Color(0xFFC4BFDB)
val onPrimaryContainerDarkHighContrast = Color(0xFF0A091C)
val secondaryDarkHighContrast = Color(0xFFFFFFFF)
val onSecondaryDarkHighContrast = Color(0xFF000000)
val secondaryContainerDarkHighContrast = Color(0xFFE0E2E6)
val onSecondaryContainerDarkHighContrast = Color(0xFF272A2D)
val tertiaryDarkHighContrast = Color(0xFFFFFFFF)
val onTertiaryDarkHighContrast = Color(0xFF000000)
val tertiaryContainerDarkHighContrast = Color(0xFFE0E2E6)
val onTertiaryContainerDarkHighContrast = Color(0xFF272A2D)
val errorDarkHighContrast = Color(0xFFFFECEB)
val onErrorDarkHighContrast = Color(0xFF000000)
val errorContainerDarkHighContrast = Color(0xFFFFADAF)
val onErrorContainerDarkHighContrast = Color(0xFF220003)
val backgroundDarkHighContrast = Color(0xFF141315)
val onBackgroundDarkHighContrast = Color(0xFFE5E1E3)
val surfaceDarkHighContrast = Color(0xFF141313)
val onSurfaceDarkHighContrast = Color(0xFFFFFFFF)
val surfaceVariantDarkHighContrast = Color(0xFF444748)
val onSurfaceVariantDarkHighContrast = Color(0xFFFFFFFF)
val outlineDarkHighContrast = Color(0xFFEEF0F1)
val outlineVariantDarkHighContrast = Color(0xFFC0C3C4)
val scrimDarkHighContrast = Color(0xFF000000)
val inverseSurfaceDarkHighContrast = Color(0xFFE5E2E1)
val inverseOnSurfaceDarkHighContrast = Color(0xFF000000)
val inversePrimaryDarkHighContrast = Color(0xFF48455C)
val surfaceDimDarkHighContrast = Color(0xFF141313)
val surfaceBrightDarkHighContrast = Color(0xFF51504F)
val surfaceContainerLowestDarkHighContrast = Color(0xFF000000)
val surfaceContainerLowDarkHighContrast = Color(0xFF201F1F)
val surfaceContainerDarkHighContrast = Color(0xFF313030)
val surfaceContainerHighDarkHighContrast = Color(0xFF3C3B3B)
val surfaceContainerHighestDarkHighContrast = Color(0xFF474646)


val goodLight = Color(0xFF386A22)
val onGoodLight = Color(0xFFFFFFFF)
val goodContainerLight = Color(0xFF9BD47F)
val onGoodContainerLight = Color(0xFF2B5C16)

val goodLightMediumContrast = Color(0xFF113F00)
val onGoodLightMediumContrast = Color(0xFFFFFFFF)
val goodContainerLightMediumContrast = Color(0xFF467930)
val onGoodContainerLightMediumContrast = Color(0xFFFFFFFF)

val goodLightHighContrast = Color(0xFF0D3400)
val onGoodLightHighContrast = Color(0xFFFFFFFF)
val goodContainerLightHighContrast = Color(0xFF22540D)
val onGoodContainerLightHighContrast = Color(0xFFFFFFFF)

val goodDark = Color(0xFFB6F198)
val onGoodDark = Color(0xFF0F3900)
val goodContainerDark = Color(0xFF9BD47F)
val onGoodContainerDark = Color(0xFF2B5C16)

val goodDarkMediumContrast = Color(0xFFB6F198)
val onGoodDarkMediumContrast = Color(0xFF0B3000)
val goodContainerDarkMediumContrast = Color(0xFF9BD47F)
val onGoodContainerDarkMediumContrast = Color(0xFF113E00)

val goodDarkHighContrast = Color(0xFFC9FFAD)
val onGoodDarkHighContrast = Color(0xFF000000)
val goodContainerDarkHighContrast = Color(0xFF9BD47F)
val onGoodContainerDarkHighContrast = Color(0xFF021200)




@Composable
fun extendedColor(light: Color, dark: Color): Color {
    return if (isSystemInDarkTheme()) dark else light
}

val ColorScheme.extraColor: Color
    @Composable get() = extendedColor(
        light = Color(0xFF000000),
        dark = Color(0xFFFFFFFF)
    )
