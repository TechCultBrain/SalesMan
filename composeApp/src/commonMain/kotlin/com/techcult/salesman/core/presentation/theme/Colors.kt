package com.techcult.salesman.core.presentation.theme

import androidx.compose.foundation.isSystemInDarkTheme
import androidx.compose.material3.ColorScheme
import androidx.compose.runtime.Composable
import androidx.compose.ui.graphics.Color


val primaryLight = Color(0xFF006399)
val onPrimaryLight = Color(0xFFFFFFFF)
val primaryContainerLight = Color(0xFF1DA1F2)
val onPrimaryContainerLight = Color(0xFF003554)
val secondaryLight = Color(0xFF3E6281)
val onSecondaryLight = Color(0xFFFFFFFF)
val secondaryContainerLight = Color(0xFFB7DBFF)
val onSecondaryContainerLight = Color(0xFF3D607F)
val tertiaryLight = Color(0xFF8540A3)
val onTertiaryLight = Color(0xFFFFFFFF)
val tertiaryContainerLight = Color(0xFFC67DE4)
val onTertiaryContainerLight = Color(0xFF530672)
val errorLight = Color(0xFFBA1A1A)
val onErrorLight = Color(0xFFFFFFFF)
val errorContainerLight = Color(0xFFFFDAD6)
val onErrorContainerLight = Color(0xFF93000A)
val backgroundLight = Color(0xFFF7F9FF)
val onBackgroundLight = Color(0xFF171C21)
val surfaceLight = Color(0xFFF7F9FF)
val onSurfaceLight = Color(0xFF171C21)
val surfaceVariantLight = Color(0xFFDAE3EF)
val onSurfaceVariantLight = Color(0xFF3F4851)
val outlineLight = Color(0xFF6F7882)
val outlineVariantLight = Color(0xFFBEC7D3)
val scrimLight = Color(0xFF000000)
val inverseSurfaceLight = Color(0xFF2C3136)
val inverseOnSurfaceLight = Color(0xFFEDF1F8)
val inversePrimaryLight = Color(0xFF95CCFF)
val surfaceDimLight = Color(0xFFD6DAE1)
val surfaceBrightLight = Color(0xFFF7F9FF)
val surfaceContainerLowestLight = Color(0xFFFFFFFF)
val surfaceContainerLowLight = Color(0xFFF0F4FB)
val surfaceContainerLight = Color(0xFFEAEEF5)
val surfaceContainerHighLight = Color(0xFFE5E8EF)
val surfaceContainerHighestLight = Color(0xFFDFE3EA)

val primaryLightMediumContrast = Color(0xFF00395B)
val onPrimaryLightMediumContrast = Color(0xFFFFFFFF)
val primaryContainerLightMediumContrast = Color(0xFF0072B0)
val onPrimaryContainerLightMediumContrast = Color(0xFFFFFFFF)
val secondaryLightMediumContrast = Color(0xFF103956)
val onSecondaryLightMediumContrast = Color(0xFFFFFFFF)
val secondaryContainerLightMediumContrast = Color(0xFF4D7090)
val onSecondaryContainerLightMediumContrast = Color(0xFFFFFFFF)
val tertiaryLightMediumContrast = Color(0xFF580E76)
val onTertiaryLightMediumContrast = Color(0xFFFFFFFF)
val tertiaryContainerLightMediumContrast = Color(0xFF954FB3)
val onTertiaryContainerLightMediumContrast = Color(0xFFFFFFFF)
val errorLightMediumContrast = Color(0xFF740006)
val onErrorLightMediumContrast = Color(0xFFFFFFFF)
val errorContainerLightMediumContrast = Color(0xFFCF2C27)
val onErrorContainerLightMediumContrast = Color(0xFFFFFFFF)
val backgroundLightMediumContrast = Color(0xFFF7F9FF)
val onBackgroundLightMediumContrast = Color(0xFF171C21)
val surfaceLightMediumContrast = Color(0xFFF7F9FF)
val onSurfaceLightMediumContrast = Color(0xFF0D1216)
val surfaceVariantLightMediumContrast = Color(0xFFDAE3EF)
val onSurfaceVariantLightMediumContrast = Color(0xFF2E3740)
val outlineLightMediumContrast = Color(0xFF4A535D)
val outlineVariantLightMediumContrast = Color(0xFF656E78)
val scrimLightMediumContrast = Color(0xFF000000)
val inverseSurfaceLightMediumContrast = Color(0xFF2C3136)
val inverseOnSurfaceLightMediumContrast = Color(0xFFEDF1F8)
val inversePrimaryLightMediumContrast = Color(0xFF95CCFF)
val surfaceDimLightMediumContrast = Color(0xFFC3C7CD)
val surfaceBrightLightMediumContrast = Color(0xFFF7F9FF)
val surfaceContainerLowestLightMediumContrast = Color(0xFFFFFFFF)
val surfaceContainerLowLightMediumContrast = Color(0xFFF0F4FB)
val surfaceContainerLightMediumContrast = Color(0xFFE5E8EF)
val surfaceContainerHighLightMediumContrast = Color(0xFFD9DDE4)
val surfaceContainerHighestLightMediumContrast = Color(0xFFCED2D9)

val primaryLightHighContrast = Color(0xFF002F4C)
val onPrimaryLightHighContrast = Color(0xFFFFFFFF)
val primaryContainerLightHighContrast = Color(0xFF004D78)
val onPrimaryContainerLightHighContrast = Color(0xFFFFFFFF)
val secondaryLightHighContrast = Color(0xFF012F4B)
val onSecondaryLightHighContrast = Color(0xFFFFFFFF)
val secondaryContainerLightHighContrast = Color(0xFF284C6A)
val onSecondaryContainerLightHighContrast = Color(0xFFFFFFFF)
val tertiaryLightHighContrast = Color(0xFF4B0069)
val onTertiaryLightHighContrast = Color(0xFFFFFFFF)
val tertiaryContainerLightHighContrast = Color(0xFF6D288B)
val onTertiaryContainerLightHighContrast = Color(0xFFFFFFFF)
val errorLightHighContrast = Color(0xFF600004)
val onErrorLightHighContrast = Color(0xFFFFFFFF)
val errorContainerLightHighContrast = Color(0xFF98000A)
val onErrorContainerLightHighContrast = Color(0xFFFFFFFF)
val backgroundLightHighContrast = Color(0xFFF7F9FF)
val onBackgroundLightHighContrast = Color(0xFF171C21)
val surfaceLightHighContrast = Color(0xFFF7F9FF)
val onSurfaceLightHighContrast = Color(0xFF000000)
val surfaceVariantLightHighContrast = Color(0xFFDAE3EF)
val onSurfaceVariantLightHighContrast = Color(0xFF000000)
val outlineLightHighContrast = Color(0xFF242D36)
val outlineVariantLightHighContrast = Color(0xFF414A54)
val scrimLightHighContrast = Color(0xFF000000)
val inverseSurfaceLightHighContrast = Color(0xFF2C3136)
val inverseOnSurfaceLightHighContrast = Color(0xFFFFFFFF)
val inversePrimaryLightHighContrast = Color(0xFF95CCFF)
val surfaceDimLightHighContrast = Color(0xFFB5B9C0)
val surfaceBrightLightHighContrast = Color(0xFFF7F9FF)
val surfaceContainerLowestLightHighContrast = Color(0xFFFFFFFF)
val surfaceContainerLowLightHighContrast = Color(0xFFEDF1F8)
val surfaceContainerLightHighContrast = Color(0xFFDFE3EA)
val surfaceContainerHighLightHighContrast = Color(0xFFD1D5DB)
val surfaceContainerHighestLightHighContrast = Color(0xFFC3C7CD)

val primaryDark = Color(0xFF95CCFF)
val onPrimaryDark = Color(0xFF003352)
val primaryContainerDark = Color(0xFF1DA1F2)
val onPrimaryContainerDark = Color(0xFF003554)
val secondaryDark = Color(0xFFA7CAEE)
val onSecondaryDark = Color(0xFF073350)
val secondaryContainerDark = Color(0xFF254A68)
val onSecondaryContainerDark = Color(0xFF95B9DC)
val tertiaryDark = Color(0xFFEBB2FF)
val onTertiaryDark = Color(0xFF510370)
val tertiaryContainerDark = Color(0xFFC67DE4)
val onTertiaryContainerDark = Color(0xFF530672)
val errorDark = Color(0xFFFFB4AB)
val onErrorDark = Color(0xFF690005)
val errorContainerDark = Color(0xFF93000A)
val onErrorContainerDark = Color(0xFFFFDAD6)
val backgroundDark = Color(0xFF0F1419)
val onBackgroundDark = Color(0xFFDFE3EA)
val surfaceDark = Color(0xFF0F1419)
val onSurfaceDark = Color(0xFFDFE3EA)
val surfaceVariantDark = Color(0xFF3F4851)
val onSurfaceVariantDark = Color(0xFFBEC7D3)
val outlineDark = Color(0xFF89929C)
val outlineVariantDark = Color(0xFF3F4851)
val scrimDark = Color(0xFF000000)
val inverseSurfaceDark = Color(0xFFDFE3EA)
val inverseOnSurfaceDark = Color(0xFF2C3136)
val inversePrimaryDark = Color(0xFF006399)
val surfaceDimDark = Color(0xFF0F1419)
val surfaceBrightDark = Color(0xFF353A3F)
val surfaceContainerLowestDark = Color(0xFF0A0F13)
val surfaceContainerLowDark = Color(0xFF171C21)
val surfaceContainerDark = Color(0xFF1B2025)
val surfaceContainerHighDark = Color(0xFF262A30)
val surfaceContainerHighestDark = Color(0xFF31353B)

val primaryDarkMediumContrast = Color(0xFFC1E0FF)
val onPrimaryDarkMediumContrast = Color(0xFF002842)
val primaryContainerDarkMediumContrast = Color(0xFF1DA1F2)
val onPrimaryContainerDarkMediumContrast = Color(0xFF000A15)
val secondaryDarkMediumContrast = Color(0xFFC1E0FF)
val onSecondaryDarkMediumContrast = Color(0xFF002842)
val secondaryContainerDarkMediumContrast = Color(0xFF7194B6)
val onSecondaryContainerDarkMediumContrast = Color(0xFF000000)
val tertiaryDarkMediumContrast = Color(0xFFF5D0FF)
val onTertiaryDarkMediumContrast = Color(0xFF41005C)
val tertiaryContainerDarkMediumContrast = Color(0xFFC67DE4)
val onTertiaryContainerDarkMediumContrast = Color(0xFF160022)
val errorDarkMediumContrast = Color(0xFFFFD2CC)
val onErrorDarkMediumContrast = Color(0xFF540003)
val errorContainerDarkMediumContrast = Color(0xFFFF5449)
val onErrorContainerDarkMediumContrast = Color(0xFF000000)
val backgroundDarkMediumContrast = Color(0xFF0F1419)
val onBackgroundDarkMediumContrast = Color(0xFFDFE3EA)
val surfaceDarkMediumContrast = Color(0xFF0F1419)
val onSurfaceDarkMediumContrast = Color(0xFFFFFFFF)
val surfaceVariantDarkMediumContrast = Color(0xFF3F4851)
val onSurfaceVariantDarkMediumContrast = Color(0xFFD4DDE9)
val outlineDarkMediumContrast = Color(0xFFAAB3BE)
val outlineVariantDarkMediumContrast = Color(0xFF88919C)
val scrimDarkMediumContrast = Color(0xFF000000)
val inverseSurfaceDarkMediumContrast = Color(0xFFDFE3EA)
val inverseOnSurfaceDarkMediumContrast = Color(0xFF262A30)
val inversePrimaryDarkMediumContrast = Color(0xFF004C77)
val surfaceDimDarkMediumContrast = Color(0xFF0F1419)
val surfaceBrightDarkMediumContrast = Color(0xFF40454A)
val surfaceContainerLowestDarkMediumContrast = Color(0xFF04080C)
val surfaceContainerLowDarkMediumContrast = Color(0xFF191E23)
val surfaceContainerDarkMediumContrast = Color(0xFF24282D)
val surfaceContainerHighDarkMediumContrast = Color(0xFF2E3338)
val surfaceContainerHighestDarkMediumContrast = Color(0xFF393E44)

val primaryDarkHighContrast = Color(0xFFE6F1FF)
val onPrimaryDarkHighContrast = Color(0xFF000000)
val primaryContainerDarkHighContrast = Color(0xFF8CC8FF)
val onPrimaryContainerDarkHighContrast = Color(0xFF000C19)
val secondaryDarkHighContrast = Color(0xFFE6F1FF)
val onSecondaryDarkHighContrast = Color(0xFF000000)
val secondaryContainerDarkHighContrast = Color(0xFFA3C6EA)
val onSecondaryContainerDarkHighContrast = Color(0xFF000C19)
val tertiaryDarkHighContrast = Color(0xFFFDEAFF)
val onTertiaryDarkHighContrast = Color(0xFF000000)
val tertiaryContainerDarkHighContrast = Color(0xFFE9ACFF)
val onTertiaryContainerDarkHighContrast = Color(0xFF190026)
val errorDarkHighContrast = Color(0xFFFFECE9)
val onErrorDarkHighContrast = Color(0xFF000000)
val errorContainerDarkHighContrast = Color(0xFFFFAEA4)
val onErrorContainerDarkHighContrast = Color(0xFF220001)
val backgroundDarkHighContrast = Color(0xFF0F1419)
val onBackgroundDarkHighContrast = Color(0xFFDFE3EA)
val surfaceDarkHighContrast = Color(0xFF0F1419)
val onSurfaceDarkHighContrast = Color(0xFFFFFFFF)
val surfaceVariantDarkHighContrast = Color(0xFF3F4851)
val onSurfaceVariantDarkHighContrast = Color(0xFFFFFFFF)
val outlineDarkHighContrast = Color(0xFFE8F1FD)
val outlineVariantDarkHighContrast = Color(0xFFBAC3CF)
val scrimDarkHighContrast = Color(0xFF000000)
val inverseSurfaceDarkHighContrast = Color(0xFFDFE3EA)
val inverseOnSurfaceDarkHighContrast = Color(0xFF000000)
val inversePrimaryDarkHighContrast = Color(0xFF004C77)
val surfaceDimDarkHighContrast = Color(0xFF0F1419)
val surfaceBrightDarkHighContrast = Color(0xFF4C5056)
val surfaceContainerLowestDarkHighContrast = Color(0xFF000000)
val surfaceContainerLowDarkHighContrast = Color(0xFF1B2025)
val surfaceContainerDarkHighContrast = Color(0xFF2C3136)
val surfaceContainerHighDarkHighContrast = Color(0xFF373C41)
val surfaceContainerHighestDarkHighContrast = Color(0xFF43474D)


val goodLight = Color(0xFF386A22)
val onGoodLight = Color(0xFFFFFFFF)
val goodContainerLight = Color(0xFF9BD47F)
val onGoodContainerLight = Color(0xFF2B5C16)

val goodLightMediumContrast = Color(0xFF113F00)
val onGoodLightMediumContrast = Color(0xFFFFFFFF)
val goodContainerLightMediumContrast = Color(0xFF467930)
val onGoodContainerLightMediumContrast = Color(0xFFFFFFFF)

val goodLightHighContrast = Color(0xFF0D3400)
val onGoodLightHighContrast = Color(0xFFFFFFFF)
val goodContainerLightHighContrast = Color(0xFF22540D)
val onGoodContainerLightHighContrast = Color(0xFFFFFFFF)

val goodDark = Color(0xFFB6F198)
val onGoodDark = Color(0xFF0F3900)
val goodContainerDark = Color(0xFF9BD47F)
val onGoodContainerDark = Color(0xFF2B5C16)

val goodDarkMediumContrast = Color(0xFFB6F198)
val onGoodDarkMediumContrast = Color(0xFF0B3000)
val goodContainerDarkMediumContrast = Color(0xFF9BD47F)
val onGoodContainerDarkMediumContrast = Color(0xFF113E00)

val goodDarkHighContrast = Color(0xFFC9FFAD)
val onGoodDarkHighContrast = Color(0xFF000000)
val goodContainerDarkHighContrast = Color(0xFF9BD47F)
val onGoodContainerDarkHighContrast = Color(0xFF021200)




@Composable
fun extendedColor(light: Color, dark: Color): Color {
    return if (isSystemInDarkTheme()) dark else light
}

val ColorScheme.extraColor: Color
    @Composable get() = extendedColor(
        light = Color(0xFF000000),
        dark = Color(0xFFFFFFFF)
    )
